@rendermode InteractiveServer

@using IConnet.Presale.WebApp.Services
@using IConnet.Presale.Shared.Contracts.Identity.Authentication
@using IConnet.Presale.WebApp.Models.Identity

@namespace IConnet.Presale.WebApp.Components.Reusable.Identity

@inject ProtectedLocalStorage _localStorage
@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject IIdentityHttpClientService _identityHttpClientService

<div>
    <FluentCard Width="250px" Height="200px">
        <h3>Sign In</h3>
        <div class="form-container">
            <FluentTextField Class="m-1" @bind-Value=_signInForm.Username Placeholder="Username"></FluentTextField>
            <FluentTextField Class="m-1" @bind-Value=_signInForm.Password Placeholder="Password" TextFieldType="TextFieldType.Password"></FluentTextField>

            <FluentButton Class="m-1" Appearance="Appearance.Accent" OnClick="SubmitAsync">Sign In</FluentButton>
        </div>
    </FluentCard>
</div>

<div class="p-1">
    <AuthorizeView>
        <Authorized>
            <p>You are authenticated.</p>
        </Authorized>
        <NotAuthorized>
            <p>You are not authenticated.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

<FluentOverlay @bind-Visible=@_isLoading
    Opacity="0.4"
    Alignment="@Align.Center"
    Justification="@JustifyContent.Center">
    <FluentProgressRing />
</FluentOverlay>

@code
{
    private bool _isLoading = false;
    private readonly SignInModel _signInForm = new();
    string? result = "[security token]";

    private async Task SubmitAsync()
    {
        result = await SignInAsync();
        StateHasChanged();
    }

    public async Task<string> SignInAsync()
    {
        _isLoading = true;

        var httpResult = await _identityHttpClientService.SignInAsync(
            _signInForm.Username,
            _signInForm.Password);

        if (httpResult.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            var response = JsonSerializer.Deserialize<SignInResponse>(httpResult.Content, options);
            var accessToken = response!.AccessToken;
            var refreshToken = response!.RefreshTokenStr;

            await _localStorage.SetAsync("access-token", accessToken);
            await _localStorage.SetAsync("refresh-token", refreshToken);

            var authenticationState = await _authStateProvider.GetAuthenticationStateAsync();

            if (authenticationState.User.Identity!.IsAuthenticated)
            {
                _navigationManager.NavigateTo("/");
            }

            _isLoading = false;
            return accessToken;
        }

        _isLoading = false;
        return httpResult.Content;
    }

}