@page "/helpdesk"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using IConnet.Presale.Domain.Aggregates.Presales
@using IConnet.Presale.WebApp.Services

@inject IWorkloadManager _workloadManager
@inject RealTimeService _realTimeService

<PageTitle>Helpdesk</PageTitle>

<div class="table-wrapper">
    <FluentDataGrid Class="data-table" Items="@_workPapers" Virtualize="true" ItemSize="32" OnRowFocus="@OnRowSelected" TGridItem="WorkPaper">
        <TemplateColumn Title="ID PERMOHONAN" SortBy="@sortByIdPermohonan">
            <div class="">
                @context.ApprovalOpportunity.IdPermohonan
            </div>
        </TemplateColumn>
        <TemplateColumn Title="PIC CHAT/CALL">
            <div class="">
                @if (string.IsNullOrEmpty(context.PersonInCharge.Helpdesk))
                {
                    <span>Menunggu Claim</span>
                }
                else
                {
                    @context.PersonInCharge.Helpdesk
                }
            </div>
        </TemplateColumn>
        <TemplateColumn Title="SHIFT">
            <div class="">
                @context.Shift
            </div>
        </TemplateColumn>
        <TemplateColumn Title="TGL CHAT/CALL HELPDESK">
            <div class="">
                @context.ProsesValidasi.TglChatCallMulai
            </div>
        </TemplateColumn>
        <TemplateColumn Title="NAMA PELANGGAN">
            <div class="">
                @context.ProsesValidasi.ParameterValidasi.NamaPelanggan
            </div>
        </TemplateColumn>
        <TemplateColumn Title="NOMOR TELP AKTIF">
            <div class="">
                @context.ProsesValidasi.ParameterValidasi.NomorTelepon
            </div>
        </TemplateColumn>
        <TemplateColumn Title="EMAIL AKTIF">
            <div class="">
                @context.ProsesValidasi.ParameterValidasi.Email
            </div>
        </TemplateColumn>
        <TemplateColumn Title="ALAMAT PELANGGAN">
            <div class="">
                @context.ProsesValidasi.ParameterValidasi.AlamatPelanggan
            </div>
        </TemplateColumn>
        <TemplateColumn Title="ID PLAN">
            <div class="">
                @context.ProsesValidasi.ParameterValidasi.PlnId
            </div>
        </TemplateColumn>
        <TemplateColumn Title="SHARE LOC">
            <div class="">
                @context.ProsesValidasi.ParameterValidasi.ShareLoc.LatitudeLongitude
            </div>
        </TemplateColumn>
        <TemplateColumn Title="TGL CHAT/CALL DIJAWAB">
            <div class="">
                @context.ProsesValidasi.TglChatCallRespons
            </div>
        </TemplateColumn>
        <TemplateColumn Title="REKAP CHAT HISTORY">
            <div class="">
                @context.ProsesValidasi.LinkRecapChatHistory
            </div>
        </TemplateColumn>
        <TemplateColumn Title="STATUS VALIDASI">
            <div class="">
                @context.ProsesValidasi.StatusValidasi
            </div>
        </TemplateColumn>
        <TemplateColumn Title="KETERANGAN VALIDASI">
            <div class="">
                @context.ProsesValidasi.StatusValidasi
            </div>
        </TemplateColumn>
        <TemplateColumn Title="CONTACT WHATSAPP">
            <div class="">
                @{
                    var url = $"http://{context.ApprovalOpportunity.Pemohon.WhatsApp}";
                }
                <FluentAnchor Href="@url" Target="_blank" Appearance="Appearance.Lightweight">
                    @context.ApprovalOpportunity.Pemohon.WhatsApp
                </FluentAnchor>
            </div>
        </TemplateColumn>
    </FluentDataGrid>
</div>

@if (_workPaper is not null)
{
    <CascadingValue Name="CascadeWorkPaper" Value="@_workPaper">
        <WorkPaperStaging />
    </CascadingValue>
}

@code
{
    private IQueryable<WorkPaper>? _workPapers;
    private WorkPaper? _workPaper;

    GridSort<WorkPaper> sortByIdPermohonan = GridSort<WorkPaper>
        .ByAscending(workPaper => workPaper.ApprovalOpportunity.IdPermohonan);

    protected override async Task OnInitializedAsync()
    {
        List<WorkPaper> workload = await _workloadManager.FetchWorkloadAsync();
        _workPapers = workload.AsQueryable();

        await _realTimeService.OnUpdate(async (string key) =>
        {
            await NotifyUpdate("RANDOM_KEY");
        });
    }

    private async Task NotifyUpdate(string cacheKey)
    {
        List<WorkPaper> workload = await _workloadManager.FetchWorkloadAsync();
        _workPapers = workload.AsQueryable();

        Log.Warning("Workload has been updated: {0}", cacheKey);

        // ensure component update is handle by UI thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task OnRowSelected(FluentDataGridRow<WorkPaper> row)
    {
        if (row.Item is not null)
        {
            _workPaper = row.Item;
            Log.Warning("Cascade is {0}", _workPaper is null ? "null" : "not null");

            StateHasChanged();
        }

        await Task.CompletedTask;
    }
}