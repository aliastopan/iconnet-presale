@page "/helpdesk"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using IConnet.Presale.Domain.Aggregates.Presales
@using IConnet.Presale.WebApp.Services

@inject IWorkloadManager _workloadManager
@inject NotificationService _notificationService

<PageTitle>Helpdesk</PageTitle>

<div class="table-wrapper">
    @if (_workPapers is not null)
    {
        <FluentDataGrid Items="@_workPapers"
            TGridItem="WorkPaper"
            Virtualize="true"
            Pagination="@_pagination"
            ItemSize="32"
            OnRowFocus="@OnRowSelected"
            EmptyContent="@HtmlFragment.EmptyContent">

            <TemplateColumn Title="ID PERMOHONAN" SortBy="@sortByIdPermohonan">
                <div class="">
                    @context.ApprovalOpportunity.IdPermohonan
                </div>
            </TemplateColumn>
            <TemplateColumn Title="PIC CHAT/CALL">
                <div class="">
                    @if (string.IsNullOrEmpty(context.PersonInCharge.Helpdesk))
                    {
                        <span>Menunggu Claim</span>
                    }
                    else
                    {
                        @context.PersonInCharge.Helpdesk
                    }
                </div>
            </TemplateColumn>
            <TemplateColumn Title="SHIFT">
                <div class="">
                    @context.Shift
                </div>
            </TemplateColumn>
            <TemplateColumn Title="TGL CHAT/CALL HELPDESK">
                <div class="">
                    @context.ProsesValidasi.ChatCallMulai.TglAksi
                </div>
            </TemplateColumn>
            <TemplateColumn Title="NAMA PELANGGAN">
                <div class="">
                    @context.ProsesValidasi.ParameterValidasi.NamaPelanggan
                </div>
            </TemplateColumn>
            <TemplateColumn Title="NOMOR TELP AKTIF">
                <div class="">
                    @context.ProsesValidasi.ParameterValidasi.NomorTelepon
                </div>
            </TemplateColumn>
            <TemplateColumn Title="EMAIL AKTIF">
                <div class="">
                    @context.ProsesValidasi.ParameterValidasi.Email
                </div>
            </TemplateColumn>
            <TemplateColumn Title="ALAMAT PELANGGAN">
                <div class="">
                    @context.ProsesValidasi.ParameterValidasi.AlamatPelanggan
                </div>
            </TemplateColumn>
            <TemplateColumn Title="ID PLAN">
                <div class="">
                    @context.ProsesValidasi.ParameterValidasi.PlnId
                </div>
            </TemplateColumn>
            <TemplateColumn Title="SHARE LOC">
                <div class="">
                    @context.ProsesValidasi.ParameterValidasi.ShareLoc.LatitudeLongitude
                </div>
            </TemplateColumn>
            <TemplateColumn Title="TGL CHAT/CALL DIJAWAB">
                <div class="">
                    @context.ProsesValidasi.ChatCallRespons.TglAksi
                </div>
            </TemplateColumn>
            <TemplateColumn Title="REKAP CHAT HISTORY">
                <div class="">
                    @context.ProsesValidasi.LinkRecapChatHistory
                </div>
            </TemplateColumn>
            <TemplateColumn Title="STATUS VALIDASI">
                <div class="">
                    @context.ProsesValidasi.StatusValidasi
                </div>
            </TemplateColumn>
            <TemplateColumn Title="KETERANGAN VALIDASI">
                <div class="">
                    @context.ProsesValidasi.StatusValidasi
                </div>
            </TemplateColumn>
            <TemplateColumn Title="CONTACT WHATSAPP">
                <div class="">
                    @{
                        var url = $"http://{context.ApprovalOpportunity.Pemohon.WhatsApp}";
                    }
                    <FluentAnchor Href="@url" Target="_blank" Appearance="Appearance.Lightweight">
                        @context.ApprovalOpportunity.Pemohon.WhatsApp
                    </FluentAnchor>
                </div>
            </TemplateColumn>
        </FluentDataGrid>
    }
    else
    {
        <span>Loading...</span>
    }
</div>

<FluentPaginator State="@_pagination">
    <SummaryTemplate>
        Terdapat <strong>@(_pagination.TotalItemCount ?? 0)</strong> baris
    </SummaryTemplate>
    <PaginationTextTemplate>
        Halaman <strong>@(_pagination.CurrentPageIndex + 1)</strong> dari <strong>@(_pagination.LastPageIndex + 1)</strong> halaman
    </PaginationTextTemplate>
</FluentPaginator>

@code
{
    private const int _itemPerPage = 10;
    private PaginationState _pagination = new PaginationState { ItemsPerPage = _itemPerPage };

    private IQueryable<WorkPaper>? _workPapers;

    GridSort<WorkPaper> sortByIdPermohonan = GridSort<WorkPaper>
        .ByAscending(workPaper => workPaper.ApprovalOpportunity.IdPermohonan);

    protected override async Task OnInitializedAsync()
    {
        List<WorkPaper> workload = await _workloadManager.FetchWorkloadAsync(CacheFetchMode.OnlyImportVerified);
        _workPapers = workload.AsQueryable();

        _notificationService.Subscribe(OnUpdateWorkloadAsync);
    }

    private async Task OnUpdateWorkloadAsync(string message)
    {
        List<WorkPaper> workload = await _workloadManager.FetchWorkloadAsync(CacheFetchMode.OnlyImportVerified);
        _workPapers = workload.AsQueryable();

        Log.Warning(message);

        // ensure component update is handle by UI thread
        await InvokeAsync(() =>
        {
            StateHasChanged();
            Log.Warning("Re-render 'Helpdesk Page'.");
        });
    }

    private async Task OnRowSelected(FluentDataGridRow<WorkPaper> row)
    {
        if (row.Item is not null)
        {
            var workPaper = row.Item;
            Log.Warning("Selected row {0}", workPaper is null ? "null" : workPaper.ApprovalOpportunity.IdPermohonan);

            StateHasChanged();
        }

        await Task.CompletedTask;
    }
}