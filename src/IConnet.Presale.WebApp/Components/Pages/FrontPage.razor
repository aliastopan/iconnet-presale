@rendermode InteractiveServer

@using IConnet.Presale.WebApp.Services
@using IConnet.Presale.Shared.Contracts.Identity.Authentication
@using IConnet.Presale.WebApp.Models.Identity
@using AnnotatedResult

@inject AuthenticationStateProvider _authenticationStateProvider
@inject ProtectedLocalStorage _localStorage
@inject IIdentityHttpClientService _identityHttpClientService

<PageTitle>IConnet Presale</PageTitle>

<FluentBodyContent Class="front-page">
    <div class="front-page">
        <FluentStack Orientation="Orientation.Vertical"
            HorizontalAlignment="HorizontalAlignment.Center"
            VerticalAlignment="VerticalAlignment.Center">

            <FluentTextField @bind-Value=_signInForm.Username Placeholder="Username" Class="username-textfield" ></FluentTextField>
            <FluentTextField @bind-Value=_signInForm.Password Placeholder="Password" TextFieldType="TextFieldType.Password" Class="password-textfield"></FluentTextField>

            <FluentButton Class="sign-in-button"
                Type="ButtonType.Submit"
                Appearance="Appearance.Accent"
                IconStart="@(new Icons.Regular.Size16.ArrowEnter())"
                Immediate="true"
                OnClick="SubmitAsync">
                Sign-In</FluentButton>

            <FluentButton Class="sign-in-button-guest"
                Appearance="Appearance.Lightweight"
                IconStart="@(new Icons.Regular.Size16.Guest())"
                Immediate="true">
                Sign as Guest</FluentButton>

        @if (_errorMessages.Count > 0)
        {
            @foreach (var errorMessage in _errorMessages)
            {
                <div class="error-warning-container">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ErrorCircle())" />
                    <span class="px-1">@errorMessage</span>
                </div>
            }
        }
        </FluentStack>
    </div>
</FluentBodyContent>

<FluentOverlay @bind-Visible=@_isLoading
    Opacity="0.4"
    Alignment="@Align.Center"
    Justification="@JustifyContent.Center">
    <FluentProgressRing />
</FluentOverlay>

@code
{
    private bool _isLoading = false;
    private readonly SignInModel _signInForm = new();
    private string? _result = "[security token]";

    private List<string> _errorMessages = new();

    private async Task SubmitAsync()
    {
        _errorMessages.Clear();

        var isValid = _signInForm.TryValidate(out Error[] errors);
        if (!isValid)
        {
            foreach (var error in errors)
            {
                _errorMessages.Add(error.Message);
            }

            return;
        }

        _result = await SignInAsync();
        StateHasChanged();
    }

    public async Task<string> SignInAsync()
    {
        _isLoading = true;

        var httpResult = await _identityHttpClientService.SignInAsync(
            _signInForm.Username,
            _signInForm.Password);

        if (httpResult.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            var response = JsonSerializer.Deserialize<SignInResponse>(httpResult.Content, options);
            var accessToken = response!.AccessToken;
            var refreshToken = response!.RefreshTokenStr;

            await _localStorage.SetAsync("access-token", accessToken);
            await _localStorage.SetAsync("refresh-token", refreshToken);

            var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();

            if (authenticationState.User.Identity!.IsAuthenticated)
            {
                Log.Warning("Redirecting...");
                StateHasChanged();
            }

            _isLoading = false;
            return accessToken;
        }

        _isLoading = false;
        return httpResult.Content;
    }

}